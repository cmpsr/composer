"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getChildren = void 0;

var _react = _interopRequireWildcard(require("react"));

var _client = require("@apollo/client");

var _context = require("../../../../context");

var _renderFromContentfulModel = _interopRequireDefault(require("../../../../utils/renderFromContentfulModel"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var StandardPageByIdQuery = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "StandardPageByIdQuery" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, directives: [] }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "preview" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, directives: [] }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "standardPage" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "preview" }, value: { kind: "Variable", name: { kind: "Name", value: "preview" } } }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "header" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Header" }, directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "contentCollection" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "limit" }, value: { kind: "IntValue", value: "20" } }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "items" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Experiment" }, directives: [] }, { kind: "FragmentSpread", name: { kind: "Name", value: "Hero" }, directives: [] }, { kind: "FragmentSpread", name: { kind: "Name", value: "Section" }, directives: [] }] } }] } }, { kind: "Field", name: { kind: "Name", value: "footer" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Footer" }, directives: [] }] } }] } }] } }, { kind: "FragmentDefinition", name: { kind: "Name", value: "Header" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Header" } }, directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "sys" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "style" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "type" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "logo" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Link" }, directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "contentCollection" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "limit" }, value: { kind: "IntValue", value: "10" } }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "items" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Link" }, directives: [] }, { kind: "FragmentSpread", name: { kind: "Name", value: "Grid" }, directives: [] }] } }] } }, { kind: "Field", name: { kind: "Name", value: "secondaryContentCollection" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "limit" }, value: { kind: "IntValue", value: "10" } }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "items" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Link" }, directives: [] }] } }] } }] } }, { kind: "FragmentDefinition", name: { kind: "Name", value: "Experiment" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Experiment" } }, directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "sys" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "variants" }, arguments: [], directives: [] }] } }, { kind: "FragmentDefinition", name: { kind: "Name", value: "Hero" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Hero" } }, directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "sys" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "title" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "type" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "eyebrow" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "subtitle" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "desktopAsset" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Asset" }, directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "mobileAsset" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Asset" }, directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "style" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "contentCollection" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "limit" }, value: { kind: "IntValue", value: "3" } }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "items" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Link" }, directives: [] }] } }] } }] } }, { kind: "FragmentDefinition", name: { kind: "Name", value: "Section" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Section" } }, directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "sys" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "title" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "subtitle" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "style" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "type" }, arguments: [], directives: [] }] } }, { kind: "FragmentDefinition", name: { kind: "Name", value: "Footer" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Footer" } }, directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "sys" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "copy" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "style" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "type" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "logo" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Link" }, directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "contentCollection" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "limit" }, value: { kind: "IntValue", value: "10" } }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "items" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Link" }, directives: [] }, { kind: "FragmentSpread", name: { kind: "Name", value: "Grid" }, directives: [] }] } }] } }, { kind: "Field", name: { kind: "Name", value: "secondaryContentCollection" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "limit" }, value: { kind: "IntValue", value: "10" } }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "items" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Link" }, directives: [] }] } }] } }] } }, { kind: "FragmentDefinition", name: { kind: "Name", value: "Link" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Link" } }, directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "sys" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "asset" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Asset" }, directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "title" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "type" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "embeddedType" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "route" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "slug" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "style" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "url" }, arguments: [], directives: [] }] } }, { kind: "FragmentDefinition", name: { kind: "Name", value: "Grid" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Grid" } }, directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "sys" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "style" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "type" }, arguments: [], directives: [] }] } }, { kind: "FragmentDefinition", name: { kind: "Name", value: "Asset" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Asset" } }, directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "contentType" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "title" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "url" }, arguments: [], directives: [] }] } }], loc: { start: 0, end: 614, source: { body: "#import \"../../../content/Experiment/fragments/Experiment.graphql\"\n#import \"../../../content/Footer/fragments/Footer.graphql\"\n#import \"../../../content/Header/fragments/Header.graphql\"\n#import \"../../../content/Hero/fragments/Hero.graphql\"\n#import \"../../../content/Section/fragments/Section.graphql\"\n\nquery StandardPageByIdQuery($id: String!, $preview: Boolean!) {\n  standardPage(id: $id, preview: $preview) {\n    id\n    header {\n      ...Header\n    }\n    contentCollection(limit: 20) {\n      items {\n        ...Experiment\n        ...Hero\n        ...Section\n      }\n    }\n    footer {\n      ...Footer\n    }\n  }\n}\n", name: "GraphQL request", locationOffset: { line: 1, column: 1 } } } };

const getChildren = ({
  id,
  preview = false
}) => {
  const contentfulContext = (0, _react.useContext)(_context.ContentfulContext);
  const {
    data
  } = (0, _client.useQuery)(StandardPageByIdQuery, {
    variables: {
      id,
      preview
    }
  });
  if (!data) return null;
  const header = data.standardPage.header && (0, _renderFromContentfulModel.default)(contentfulContext, data.standardPage.header);
  const contentItems = data.standardPage.contentCollection.items.map((item, index) => (0, _renderFromContentfulModel.default)(contentfulContext, item, index, id));
  const footer = data.standardPage.footer && (0, _renderFromContentfulModel.default)(contentfulContext, data.standardPage.footer);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, header, contentItems, footer);
};

exports.getChildren = getChildren;